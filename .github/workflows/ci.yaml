name: Zipline CI

on:  # TMP: change workflow to run on pull request, push to master
  push:
    branches:
      - gh-actions-ci
jobs:
  build-and-test:
    runs-on: ubuntu-16.04
    strategy:
      fail-fast: true
      matrix:
        python: [2.7, 3.5]
        pandas: ['old', 'new']
        exclude:
          - python: 2.7
            pandas: 'new'
        include:
          - pandas: 'old'
            NUMPY_VERSION: 1.11.3
            PANDAS_VERSION: 0.18.1
            SCIPY_VERSION: 0.17.1
          - pandas: 'new'
            NUMPY_VERSION: 1.14.1
            PANDAS_VERSION: 0.22.0
            SCIPY_VERSION: 1.0.0
            PANDAS_DATAREADER_VERSION: 0.4.0
            DASK_VERSION: 0.17.1
    name: py ${{ matrix.python }}/${{ matrix.pandas }} pandas
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Unshallow clone
        run: |
          git fetch --unshallow --tags
      - name: Cache pip directory
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python }}-${{ matrix.pandas }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-${{ matrix.pandas }}-pip-
      - name: Install dependencies
        env:
          ANACONDA_TOKEN: ${{ secrets.AnacondaToken }}
          CONDA_ROOT_PYTHON_VERSION: "2.7"
          NUMPY_VERSION: ${{ matrix.NUMPY_VERSION }}
          PANDAS_VERSION: ${{ matrix.PANDAS_VERSION }}
          SCIPY_VERSION: ${{ matrix.SCIPY_VERSION }}
        run: |
          echo "EXPORTING ENV VARS"
          echo
          if [[ matrix.PANDAS_DATAREADER_VERSION ]]; then export PANDAS_DATAREADER_VERSION=${{ matrix.PANDAS_DATAREADER_VERSION }}; fi
          if [[ matrix.DASK_VERSION ]]; then export DASK_VERSION=${{ matrix.DASK_VERSION }}; fi
          echo "env vars"
          env
          echo

          echo
          echo "INSTALL MINICONDA"
          echo
          source ./ci/travis/install_miniconda.sh
          echo

          echo
          echo "OVERWRITE REQUIREMENTS"
          source ./ci/travis/overwrite_requirements.sh
          echo etc/requirements.txt
          cat etc/requirements.txt
          echo

          echo
          echo "CONDA INFO"
          conda info -a
          echo
          echo "CONDA, CONDA-BUILD, ANACONDA-CLIENT INSTALLS"
          conda install conda=4.3.30 conda-build=3.0.28 anaconda-client=1.6.3 --yes -q
          echo
          echo "CONDA LIST"
          conda list
          echo

          echo
          echo "MORE REQUIREMENTS"
          TALIB_VERSION=$(cat ./etc/requirements_talib.txt | sed "s/TA-Lib==\(.*\)/\1/")
          echo $TALIB_VERSION
          echo
          CERTIFI_VERSION=$(cat ./etc/requirements.txt | grep "certifi" | sed "s/certifi==\(.*\)/\1/")
          echo $CERTIFI_VERSION
          echo
          IFS='.' read -r -a NPY_VERSION_ARR <<< "$NUMPY_VERSION"
          echo $IFS
          echo
          CONDA_NPY=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}
          echo $CONDA_NPY
          echo "::set-env name=CONDA_NPY::$CONDA_NPY"
          echo
          CONDA_PY=${{ matrix.python }}
          echo $CONDA_PY
          echo "::set-env name=CONDA_PY::$CONDA_PY"
          echo

          echo
          echo "ANACONDA UPLOAD"
          if [[ -n "${{ secrets.AnacondaToken }}" && "$github.ref" = "refs/heads/master" && "${{ github.event_name }}" = "pull_request" ]]; then DO_UPLOAD="true"; else DO_UPLOAD="false"; fi
          echo "::set-env name=DO_UPLOAD::$DO_UPLOAD"
          echo

          for recipe in $(ls -d conda/*/ | xargs -I {} basename {}); do
            if [[ "$recipe" = "zipline" ]]; then continue; fi

            conda build conda/$recipe --python=$CONDA_PY --numpy=$CONDA_NPY --skip-existing --old-build-string -c quantopian -c quantopian/label/ci
            RECIPE_OUTPUT=$(conda build conda/$recipe --python=$CONDA_PY --numpy=$CONDA_NPY --old-build-string --output)
            echo
            echo $RECIPE_OUTPUT
            echo
            if [[ -f "$RECIPE_OUTPUT" && "$DO_UPLOAD" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload "$RECIPE_OUTPUT" -u quantopian --label ci; fi
          done
          echo

          echo
          echo CREATE TEST ENV
          conda create -n testenv --use-local --quiet --yes -c quantopian -c quantopian/label/ci pip python=${{ matrix.python }} numpy=${{ matrix.NUMPY_VERSION }} pandas=${{ matrix.PANDAS_VERSION }} scipy=${{ matrix.SCIPY_VERSION }} ta-lib=$TALIB_VERSION libgfortran=3.0 certifi=$CERTIFI_VERSION
          echo

          echo
          echo ACTIVATE TEST ENV
          source activate testenv
          echo

          echo
          echo MORE PIP INSTALLS
          TRAVIS='' EXTERNAL_REQUIREMENTS='coveralls' etc/dev-install --cache-dir="$HOME/.cache/.pip/pip_np$CONDA_NPY"
          echo
          echo PIP FREEZE
          pip freeze | sort
          echo

          echo $PATH
          echo "::set-env name=PATH::$PATH"

      - name: Linting/Tests
        env:
          ANACONDA_TOKEN: ${{ secrets.AnacondaToken }}
          NUMPY_VERSION: ${{ matrix.NUMPY_VERSION }}
          PYTHON_VERSION: ${{ matrix.python }}
        run: |
          echo
          echo ACTIVATE TEST ENV
          source activate testenv
          echo

          echo
          echo FLAKE8
          flake8 zipline tests
          echo

          echo
          echo NOSETESTS
          nosetests --with-coverage
          echo
          source deactivate

          echo
          echo TEST ZIPLINE INSTALL IN NEW ENV
          exec 3>&1; ZP_OUT=$(conda build conda/zipline --python=$CONDA_PY --numpy=$CONDA_NPY -c quantopian -c quantopian/label/ci | tee >(cat - >&3))
          ZP_OUTPUT=$(echo "$ZP_OUT" | grep "anaconda upload " | awk '{print $NF}')
          if [ -z "$ZP_OUTPUT" ]; then exit 1; fi
          conda create -n installenv --yes -q --use-local python=$PYTHON_VERSION numpy=$NUMPY_VERSION zipline -c quantopian -c https://conda.anaconda.org/quantopian/label/ci
          if [[ "$DO_UPLOAD" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload $ZP_OUTPUT -u quantopian --label ci; fi

      # source activate testenv
      # - name: Coveralls Parallel
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     parallel: true
      # - name: Coveralls Finished
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     parallel-finished: true
